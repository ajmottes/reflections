What happens when you initialize a repository? Why do you need to do it?

	When initialize repository, git creates .git directory to create an
	empty repository that will eventually be used to track the files
	in the directory and subdirectories.  You need to do it to create the
	empty repository into which you will place commits.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is a place to collect the files that will be included
	in a particular commit.  It is a subset of the working directory.  You 
	may not want to include all current changes in the working directory
	into a commit so the staging area is a valuable concept.


How can you use the staging area to make sure you have one commit per logical
change?

	By using the git diff --staged command you can see what changes are going to be included if you commit the current staging area.  In this
	way you can remove any files from the staging area that do not belong
	to a single logical change.
	

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches would be helpful to: (1) keep production branch seperate from
	alpha and beta branches where are testing new experimental features; 
	(2) versions for different target devices; (3) different language
	versions.  Then could work on all of these at same time with branches
	and keep code organized.


How do the diagrams help you visualize the branch structure?

	Diagrams show which commits are reachable from which branches and which,
	if any, are not reachable from any branches.  They also show which
	commits would need to be merged to join features from different
	branches.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging two brances together takes any commits that were made in one
	branch and not the other and adds them all to the merged branch.  The
	resulting branch thus has ALL of the changes made in the two branches
	that were merged.  Drawing the diagram as we do reflects the fact that
	the merged branch has TWO branches as parents.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	Pros:  Quick and easy; avoids tedious work when it is clear that there
	are no conflicts.
	Cons:	If Git goes too far, it may miss a conflict where there are two
	conflicting changes to the same piece of code.
